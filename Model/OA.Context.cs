//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OAEntities : DbContext
    {
        public OAEntities()
            : base("name=OAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bill_Leave> Bill_Leave { get; set; }
        public virtual DbSet<oldWF_AutoTransactNode> oldWF_AutoTransactNode { get; set; }
        public virtual DbSet<oldWF_BillFlowNode> oldWF_BillFlowNode { get; set; }
        public virtual DbSet<oldWF_BillFlowNodeRemark> oldWF_BillFlowNodeRemark { get; set; }
        public virtual DbSet<oldWF_BillState> oldWF_BillState { get; set; }
        public virtual DbSet<oldWF_Node> oldWF_Node { get; set; }
        public virtual DbSet<oldWF_NodeState> oldWF_NodeState { get; set; }
        public virtual DbSet<oldWF_WorkFlow> oldWF_WorkFlow { get; set; }
        public virtual DbSet<oldWF_WorkFlowNode> oldWF_WorkFlowNode { get; set; }
        public virtual DbSet<Ou_Department> Ou_Department { get; set; }
        public virtual DbSet<Ou_Permission> Ou_Permission { get; set; }
        public virtual DbSet<Ou_Role> Ou_Role { get; set; }
        public virtual DbSet<Ou_RolePermission> Ou_RolePermission { get; set; }
        public virtual DbSet<Ou_UserInfo> Ou_UserInfo { get; set; }
        public virtual DbSet<Ou_UserRole> Ou_UserRole { get; set; }
        public virtual DbSet<Ou_UserVipPermission> Ou_UserVipPermission { get; set; }
        public virtual DbSet<W_WorkFlow> W_WorkFlow { get; set; }
        public virtual DbSet<W_WorkFlowBranch> W_WorkFlowBranch { get; set; }
        public virtual DbSet<W_WorkFlowNode> W_WorkFlowNode { get; set; }
        public virtual DbSet<W_WrokFlowRole> W_WrokFlowRole { get; set; }
        public virtual DbSet<WR_WorkFlowApply> WR_WorkFlowApply { get; set; }
        public virtual DbSet<WR_WrokFlowApplyDetails> WR_WrokFlowApplyDetails { get; set; }
    
        public virtual int proc_EditLeave(Nullable<int> billId, Nullable<int> billFlowNodeId, string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string transactor, Nullable<int> transactorID, string transactorRemark)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("billId", billId) :
                new ObjectParameter("billId", typeof(int));
    
            var billFlowNodeIdParameter = billFlowNodeId.HasValue ?
                new ObjectParameter("billFlowNodeId", billFlowNodeId) :
                new ObjectParameter("billFlowNodeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_EditLeave", billIdParameter, billFlowNodeIdParameter, nameParameter, beginDateParameter, endDateParameter, transactorParameter, transactorIDParameter, transactorRemarkParameter);
        }
    
        public virtual int proc_GetLeaveList(Nullable<int> nodeID, Nullable<int> opType)
        {
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var opTypeParameter = opType.HasValue ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetLeaveList", nodeIDParameter, opTypeParameter);
        }
    
        public virtual int proc_InsertLeave(string name, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, string transactor, Nullable<int> transactorID, string transactorRemark)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertLeave", nameParameter, beginDateParameter, endDateParameter, transactorParameter, transactorIDParameter, transactorRemarkParameter);
        }
    
        public virtual int proc_LeaveConfirm(Nullable<int> billID, Nullable<int> billFlowNodeID, string remark, string transactor, Nullable<int> transactorID, Nullable<int> oPType)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var billFlowNodeIDParameter = billFlowNodeID.HasValue ?
                new ObjectParameter("BillFlowNodeID", billFlowNodeID) :
                new ObjectParameter("BillFlowNodeID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var oPTypeParameter = oPType.HasValue ?
                new ObjectParameter("OPType", oPType) :
                new ObjectParameter("OPType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_LeaveConfirm", billIDParameter, billFlowNodeIDParameter, remarkParameter, transactorParameter, transactorIDParameter, oPTypeParameter);
        }
    
        public virtual int Proc_WorkFlow_BillRemark_List(Nullable<int> billID, Nullable<int> workFlowID)
        {
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_WorkFlow_BillRemark_List", billIDParameter, workFlowIDParameter);
        }
    
        public virtual int Proc_WorkFlow_Interface(Nullable<int> billFlowNodeID, Nullable<int> billID, Nullable<int> workFlowID, Nullable<int> nodeID, Nullable<int> oPType, Nullable<int> transactorID, string transactor, string transactorRemark)
        {
            var billFlowNodeIDParameter = billFlowNodeID.HasValue ?
                new ObjectParameter("BillFlowNodeID", billFlowNodeID) :
                new ObjectParameter("BillFlowNodeID", typeof(int));
    
            var billIDParameter = billID.HasValue ?
                new ObjectParameter("BillID", billID) :
                new ObjectParameter("BillID", typeof(int));
    
            var workFlowIDParameter = workFlowID.HasValue ?
                new ObjectParameter("WorkFlowID", workFlowID) :
                new ObjectParameter("WorkFlowID", typeof(int));
    
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var oPTypeParameter = oPType.HasValue ?
                new ObjectParameter("OPType", oPType) :
                new ObjectParameter("OPType", typeof(int));
    
            var transactorIDParameter = transactorID.HasValue ?
                new ObjectParameter("TransactorID", transactorID) :
                new ObjectParameter("TransactorID", typeof(int));
    
            var transactorParameter = transactor != null ?
                new ObjectParameter("Transactor", transactor) :
                new ObjectParameter("Transactor", typeof(string));
    
            var transactorRemarkParameter = transactorRemark != null ?
                new ObjectParameter("TransactorRemark", transactorRemark) :
                new ObjectParameter("TransactorRemark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_WorkFlow_Interface", billFlowNodeIDParameter, billIDParameter, workFlowIDParameter, nodeIDParameter, oPTypeParameter, transactorIDParameter, transactorParameter, transactorRemarkParameter);
        }
    }
}
